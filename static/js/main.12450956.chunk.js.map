{"version":3,"sources":["constants/index.ts","hooks/useTypedSelector.ts","components/Table/TableHeader/index.tsx","components/Table/TableRow/index.tsx","components/Table/TableBody/index.tsx","components/Table/TableFilter/index.tsx","components/Table/index.tsx","utils/prepareData.ts","components/App/App.tsx","reducers/filterReducer.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["EFilterActionTypes","useTypedSelector","useSelector","TableHeader","columns","className","map","key","title","TableRow","item","children","level","useState","isCollapsed","setIsCollapsed","id","name","email","balance","isActive","hasChildren","style","left","onClick","TableBody","data","parentId","items","filter","length","TableFilter","dispatch","useDispatch","state","type","onChange","event","IS_ACTIVE_USER","payload","target","checked","Table","localData","setLocalData","useEffect","result","prepareData","App","initialState","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12450956.chunk.js","sourcesContent":["export enum EFilterActionTypes {\n  IS_ACTIVE_USER = 'IS_ACTIVE_USER',\n}\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { TColumns } from '../../../types';\nimport './index.scss';\n\ntype TTableHeaderProps = {\n  columns: TColumns[];\n};\n\nexport const TableHeader = ({ columns }: TTableHeaderProps) => (\n  <tr className=\"table_row_header\">\n    {columns.map(({ key, title }: TColumns) => {\n      return (\n        <th key={key} className=\"table_header\">\n          {title}\n        </th>\n      );\n    })}\n  </tr>\n);\n","import { useState, Fragment, ReactNode } from 'react';\nimport { IPrepareData } from '../../../types';\nimport './index.scss';\n\ntype TTableRowProps = {\n  item: IPrepareData;\n  children: ReactNode;\n  level: number;\n};\n\nexport const TableRow = ({ item, children, level }: TTableRowProps) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n\n  const { id, name, email, balance, isActive, hasChildren } = item;\n\n  const arrowRender = () =>\n    isCollapsed ? <span>&#9658;</span> : <span>&#9660;</span>;\n\n  const handlerCollapsed = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <Fragment key={`row-${id}`}>\n      <tr\n        style={{ left: `${level}px` }}\n        className=\"table_row\"\n        onClick={handlerCollapsed}\n      >\n        <td>{name}</td>\n        <td>{email}</td>\n        <td>{balance}</td>\n        <td>{isActive ? 'yes' : 'no'}</td>\n        <td>{hasChildren && arrowRender()}</td>\n      </tr>\n\n      {!isCollapsed && children}\n    </Fragment>\n  );\n};\n","import { TableRow } from '../TableRow';\nimport { IPrepareData } from '../../../types';\n\ntype TTableBodyProps = {\n  data: IPrepareData[];\n  parentId?: number;\n  level?: number;\n};\n\nexport const TableBody = ({\n  data,\n  parentId = 0,\n  level = 10,\n}: TTableBodyProps) => {\n  const items = data.filter((item: IPrepareData) => item.parentId === parentId);\n\n  return (\n    <>\n      {items.length\n        ? items.map((item: IPrepareData) => (\n            <TableRow key={item.id} item={item} level={level}>\n              <TableBody data={data} parentId={item.id} level={level + 10} />\n            </TableRow>\n          ))\n        : null}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { EFilterActionTypes } from '../../../constants';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport './index.scss';\n\nexport const TableFilter: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: EFilterActionTypes.IS_ACTIVE_USER,\n      payload: event.target.checked,\n    });\n  };\n\n  const { isActive } = useTypedSelector((state) => state.filter);\n\n  return (\n    <div className=\"filter\">\n      <label className=\"filter_isActive-label\">\n        Filterd active users\n        <input\n          type=\"checkbox\"\n          className=\"filter_isActive-input\"\n          onChange={handleOnChange}\n          checked={isActive}\n        />\n      </label>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IData, IPrepareData, TColumns } from '../../types';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { prepareData } from '../../utils/prepareData';\nimport { TableHeader } from './TableHeader';\nimport { TableBody } from './TableBody';\nimport { TableFilter } from './TableFilter';\nimport './index.scss';\n\ntype TTableProps = {\n  data: IData[];\n  columns: TColumns[];\n};\n\nexport const Table = ({ data, columns }: TTableProps) => {\n  const [localData, setLocalData] = useState<IPrepareData[]>([]);\n\n  const { isActive } = useTypedSelector((state) => state.filter);\n\n  useEffect(() => {\n    const result = isActive\n      ? data.filter((item: IData) => item.isActive)\n      : data;\n\n    setLocalData(prepareData(result));\n  }, [data, isActive]);\n\n  return (\n    <div className=\"container\">\n      <TableFilter />\n\n      <table className=\"table\">\n        <thead>\n          <TableHeader columns={columns} />\n        </thead>\n        <tbody>\n          <TableBody data={localData} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { IData, IPrepareData } from '../types';\n\nexport const prepareData = (data: IData[]): IPrepareData[] => {\n  return data.map((item: IData) => ({\n    ...item,\n    hasChildren:\n      data.filter(({ parentId }: IData) => parentId === item.id).length > 0,\n  }));\n};\n","import data from '../../data.json';\nimport { Table } from '../Table';\n\nexport const App = () => {\n  const columns = [\n    {\n      key: 1,\n      title: 'Name',\n    },\n    {\n      key: 2,\n      title: 'Email',\n    },\n    {\n      key: 3,\n      title: 'Balance',\n    },\n    {\n      key: 4,\n      title: 'isActive',\n    },\n    {\n      key: 5,\n      title: '',\n    },\n  ];\n\n  return <Table data={data} columns={columns} />;\n};\n","import { EFilterActionTypes } from '../constants';\n\ninterface filterAction {\n  type: string;\n  payload: boolean;\n}\n\nconst initialState = {\n  isActive: false,\n};\n\nexport const filterReducer = (state = initialState, action: filterAction) => {\n  switch (action.type) {\n    case EFilterActionTypes.IS_ACTIVE_USER:\n      return {\n        isActive: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { filterReducer } from './filterReducer';\n\nexport const rootReducer = combineReducers({\n  filter: filterReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from 'redux';\nimport { rootReducer } from '../reducers';\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/App/App';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}